

def print_state(state):
  print("Çubuk 1:", state[0] if state[0] else "[]")
  print("Çubuk 2:", state[1] if state[1] else "[]")
  print("Çubuk 3:", state[2] if state[2] else "[]")


# Test edin - Fonksiyonunuzu burada test edin
test_state = [[1, 3, 5], [2], [4]]
print_state(test_state)


def is_valid_move(disk, target_peg):
    if not target_peg:
        return True
    return disk < target_peg[0]
print("Test 1:", is_valid_move(2, [1, 3]))
print("Test 2:", is_valid_move(1, [2, 3]))
print("Test 3:", is_valid_move(5, []))


  def get_possible_moves(state):

    possible_states = []


    for i in range(3):
        if not state[i]:
          continue

        disk = state[i][0]

        for j in range(3):
          if i == j:
            continue


            if not state[j] or state[j][0] > disk:
             new_state = [peg[:] for peg in state]

            # TODO: Diğer çubukları dene
            for j in range(3):
                if continue :
                    # TODO: Hamlenin geçerli olup olmadığını kontrol et
                    if is_valid_move(top_disk, state[j]):
                        # Yeni durumun kopyasını oluştur
                        new_state = [peg[:] for peg in state]

                        # TODO: Diski kaynaktan çıkar
                        new_state[i].pop(0)

                        # TODO: Diski hedefe ekle
                        new_state[j].insert(0, disk)

                        possible_states.append(new_state)

    return possible_states


test_state = [[1, 3, 5], [2], [4]]
moves = get_possible_moves(test_state)

print("Başlangıç durumu:")
print_state(test_state)
print(f"\nBulunan hamle sayısı: {len(moves)}")
for i, move in enumerate(moves):
    print(f"Hamle {i+1}: {move}")

  
# Test durumları
test_cases = [
    [[1, 3, 5], [2], [4]],        # Örnek verilen
    [[3, 5], [1, 2], [4]],
    [[3, 5], [2], [1, 4]],
    [[1, 3, 5], [], [2, 4]],
    [[], [1, 2, 3], [4]],
    [[2, 3], [], [1]],
    [[3, 4, 5], [1], [2]]
]

print("=" * 60)
print("HANOİ KULELERİ - TEST SONUÇLARI")
print("=" * 60)

for idx, case in enumerate(test_cases):
    print(f"\nTest {idx+1}")
    print("Başlangıç durumu:")
    print_state(case)
    moves = get_possible_moves(case)
    print(f"Bulunan hamle sayısı: {len(moves)}")
    for i, move in enumerate(moves):
        print(f"Hamle {i+1}: {move}")
